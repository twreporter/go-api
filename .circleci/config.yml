# go-api webservice CircleCI 2.0 configuration file
#
version: 2
jobs:
  prepare:
    docker:
      - image: circleci/golang:1.14.4
        environment:
          GO111MODULE: "on"

    working_directory: /go/src/github.com/twreporter/go-api

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - go-mod-{{ checksum "go.sum" }}

      - run:
          name: Download module dependencies
          command: |
            go mod download

      - run:
          name: Verify module checksum
          command: |
            go mod verify

      - save_cache:
          paths:
            - /go/pkg/mod
          key: go-mod-{{ checksum "go.sum" }}

      - run:
          name: Save pkg version to a file
          command: go run ./.circleci/scripts/read-changelog.go > .pkg-version

      - persist_to_workspace:
          root: /go/src/github.com/twreporter/go-api
          paths:
            - ./*

  test:
    docker:
      - image: circleci/golang:1.14.4
        environment:
          GO111MODULE: "on"
      - image: circleci/mongo:3.6.18
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: gorm
          MYSQL_HOST: localhost
          MYSQL_USER: gorm
          MYSQL_PASSWORD: gorm
          MYSQL_ROOT_HOST: "%"

    working_directory: /go/src/github.com/twreporter/go-api

    steps:
      - attach_workspace:
          at: .

      - restore_cache:
          keys:
            - go-mod-{{ checksum "go.sum" }}

      - run:
          name: Install dockerize for health check mysql status
          environment:
            DOCKERIZE_VERSION: v0.3.0
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

      - run:
          name: Waiting for mysql to be ready
          command: |
            dockerize -wait tcp://${MYSQL_HOST}:3306 -timeout 30s

      - run: mkdir -p test-results
      # run tests!
      - run: gotestsum --junitfile test-results/junit.xml ./...

  build_and_deploy:
    docker:
      - image: google/cloud-sdk

    working_directory: /go/src/github.com/twreporter/go-api

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /go/src/github.com/twreporter/go-api

      - run:
          name: Install Docker CLI (if not present)
          command: |
            if ! command -v docker; then
              apt-get update && apt-get install -y docker.io
            fi

      - run:
          name: Setup custom environment variables
          command: |
            # K8S_CLUSTER_NAME is defined in the organization context twreporter.
            APP="go-api"
            CLUSTER_NAME=${K8S_CLUSTER_NAME}
            CLUSTER_NAMESPACE="default"
            DEPLOYMENT="go-api"
            ENVIRONMENT=""
            PKG_VER="latest"

            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              # pkg version for staging
              PKG_VER="staging-$(cat .pkg-version)-$CIRCLE_BUILD_NUM"
              CLUSTER_NAMESPACE="staging"
              ENVIRONMENT="staging"
            fi


            if [ "${CIRCLE_BRANCH}" == "next" ]; then
              PKG_VER="next-$(cat .pkg-version)-$CIRCLE_BUILD_NUM"
              CLUSTER_NAMESPACE="production"
              ENVIRONMENT="next"
            fi

            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              # pkg version for release
              PKG_VER="$(cat .pkg-version)"
              CLUSTER_NAMESPACE="production"
              ENVIRONMENT="release"
            fi

            echo "export PKG_VER=${PKG_VER}" >> $BASH_ENV
            echo "export DEPLOYMENT=${DEPLOYMENT}" >> $BASH_ENV
            echo "export APP=${APP}" >> $BASH_ENV
            echo "export CLUSTER_NAME=${CLUSTER_NAME}" >> $BASH_ENV
            echo "export CLUSTER_NAMESPACE=${CLUSTER_NAMESPACE}" >> $BASH_ENV
            echo "export ENVIRONMENT=${ENVIRONMENT}" >> $BASH_ENV
            echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $BASH_ENV

      - run:
          name: Connect to container cluster
          command: |
            # GOOGLE_AUTH is defined in Environment Variables of circleci project
            # GOOGLE_PROJECT_ID is defined in the organization context twreporter
            echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet container clusters get-credentials $CLUSTER_NAME --region=asia-east1

      - run:
          name: Build and push docker image
          command: |
            # aws config
            echo ${AWS_CREDENTIALS} | base64 -i --decode > ./aws_credentials

            # pubsub config
            echo ${PUBSUB_CREDENTIALS} | base64 -i --decode > ./pubsub_credentials

            docker build -t gcr.io/coastal-run-106202/${APP}:$PKG_VER .
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/coastal-run-106202/${APP}:$PKG_VER

      - run:
          name: Fetch Kubernetes config source
          command: |
            gcloud source repos clone ${K8S_CONFIG_REPO} 

      - run:
          name: Install kustomize binaries
          command: |
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash -s 3.8.9
            mv ./kustomize /usr/local/bin/
      - run:
          name: Prepare for kubernetes config build
          command: |
            # K8S_CONFIG_REPO is defined in the organization context twreporter.
            cd "${K8S_CONFIG_REPO}/${APP}/overlays/${ENVIRONMENT}"

            kustomize edit set image "gcr.io/coastal-run-106202/${APP}:${PKG_VER}"

      - run:
          name: Deploy to Google Kubernetes Engine
          command: |
            kustomize build "${K8S_CONFIG_REPO}/${APP}/overlays/${ENVIRONMENT}" | kubectl apply -f -
            kubectl rollout status deployment ${DEPLOYMENT} -n $CLUSTER_NAMESPACE

workflows:
  version: 2
  build_and_test:
    jobs:
      - prepare
      - test:
          requires:
            - prepare
      - build_and_deploy:
          context: twreporter-gcp
          requires:
            - test
          filters:
            branches:
              only:
                - release
                - staging
                - next
